			     EE 109  - Fall 2021
				  Rangefinder


Review Question 1 (Cost Analysis):

Assume we are building 1000 units of this system.  Use the provided part
numbers (see the webpage) and the digikey.com or jameco.com website to find the
total **cost per unit** (again assume we build a quantity of 1000 units) for
these range finding systems.  Itemize the part costs (list each part and its
unit cost when bought in units of 1000) and then show the final cost per unit
below.  Note: You only need to price the components used in the project (not
all the components in your lab kit.  Also, you do not need to account for the
cost of the circuit board or wires. In a real environment we would manufacture
a PCB (Printed Circuit Board). As an optional task, you can search online for
PCB manufacturers and what the costs and options are in creating a PCB.

   Item:                Per Unit Price -> Bulk Price
   USB Cable:           $1.49          -> $1,340
   Arduino:             $23.00         -> $23,000
   LCD Shield:          $9.90          -> $8,900
   680 ohm resistor:    $0.10          -> $22.66
   1300 ohm resistor:   $0.10          -> $11.33
   500 x 4 pushbuttons: $1.60          -> $720
   SN74HCT04N:          $0.53          -> $166
   Encoder:             $3.55          -> $1,936.68
   Knob:                $1.49          -> $890
   Buzzer:              $0.71          -> $473.24
   Rangefinder:         $3.95          -> $3,950.00
   10 x 100 RGB LED:    $8.99          -> $8,990

      Total Cost: $50,399.91

      Price per Unit: $50.40


Review Question 2 (Health/Safety/Reliability)

Assume this system was to be used in a real industrial monitoring application.

Considering reliability, health, and safety...

 - What scenarios might you suggest testing (considering both HW and SW) 
    before releasing the product for use? 

   From a hardware perspective, we should test it for reliability by exposing it
   to various surfaces across various distances and documenting the precision of the
   system.

   From a software perspective, we should test it with various operating systems such
   as Windows, Linux, and MacOS, or even from Android or Apple devices which might be
   attached to a USB-connector.


 - How might you make your design more reliable? By reliability we don't just
   mean keeping it running correctly (though you should consider that), but
   also how you can detect that a connected component has failed to gracefully
   handle such situations.  You can consider both HW and SW points of failure,
   issues related to the operational environment, etc. and how to mitigate
   those cases.

   From a hardware perspective, we should design it to be shock-proof by using
   PCBs instead of loose wires. We might also have the option of making it waterproof.
   This ensures that the device remains operational under different weather terrains.

   From a software perspective, we can implement a feature that enables users to
   send their error data to our headquarters so that we can have more information on the
   issues that the end user faces. In addition, we can implement an online support system
   that would help them with basic issues.






